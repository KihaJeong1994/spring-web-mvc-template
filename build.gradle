plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.0'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "com.diffplug.spotless" version "6.22.0"
}

configurations {
    asciidoctorExt // declare configuration for dependencies that extend Asciidoctor
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-openfeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.4'
    // https://mvnrepository.com/artifact/io.github.openfeign/feign-hc5
    implementation 'io.github.openfeign:feign-hc5:13.1'

    // https://mvnrepository.com/artifact/org.wiremock/wiremock
    testImplementation 'org.wiremock:wiremock:3.3.1'

}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}") { // by this setting, you can see html file in docs/<filename>.html
        into 'static/docs'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// ./gradlew spotlessApply
spotless {
    java {
        // Use the default importOrder configuration
        importOrder()

        removeUnusedImports()

        // Choose one of these formatters.
        googleJavaFormat()
//        eclipse()   // has its own section below

        formatAnnotations()  // fixes formatting of type annotations, see below
    }
}
